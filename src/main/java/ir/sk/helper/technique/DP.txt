Consider using DP whenever you have to make choices to arrive at the solution,
specifically, when the solution relates to subproblems.
In addition to optimization problems, DP is also applicable to counting and
decision problemsâ€”any problem where you can express a solution recursively
in terms of the same computation on smaller instances.
Although conceptually DP involves recursion, often for efficiency the cache is
built "bottom-up", i.e., iteratively.
To save space, cache space may be recycled once it is known that a set of entries
will not be looked up again.
Sometimes, recursion may out-perform a bottom-up DP solution, e.g., when
the solution is found early or subproblems can be pruned through bounding.